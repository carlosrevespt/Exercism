using System;
using System.Diagnostics;

public static class RealNumberExtension
{
    public static double Expreal(this int realNumber, RationalNumber r)
    { 
        return Math.Pow(realNumber, (double)r.Numerator() / (double)r.Denominator());
    }
}

public struct RationalNumber
{
    private readonly int numerator;
    private readonly int denominator;

    public RationalNumber(int numerator, int denominator)
    {
        if (denominator == 0) throw new ArgumentException();

        this.numerator = numerator;
        this.denominator = denominator;
    }

    public int Numerator() => numerator;

    public int Denominator() => denominator;

    public static RationalNumber operator +(RationalNumber r1, RationalNumber r2)
    {
        return new RationalNumber((r1.numerator * r2.denominator) + (r2.numerator * r1.denominator), (r1.denominator * r2.denominator)).Reduce();
    }

    public static RationalNumber operator -(RationalNumber r1, RationalNumber r2)
    {
        return r1 + new RationalNumber(-r2.numerator, r2.denominator);
    }

    public static RationalNumber operator *(RationalNumber r1, RationalNumber r2)
    {
        return new RationalNumber(r1.numerator * r2.numerator, r1.denominator * r2.denominator).Reduce();
    }

    public static RationalNumber operator /(RationalNumber r1, RationalNumber r2)
    {
        return r1 * new RationalNumber(r2.denominator, r2.numerator);
    }

    public RationalNumber Abs() => new RationalNumber(Math.Abs(numerator), Math.Abs(denominator)).Reduce();

    public RationalNumber Reduce()
    {
        if (numerator == 0) return new RationalNumber(0, 1);
        int currGcd = gcd(numerator, denominator) * (denominator < 0 ? -1 : 1);
        return new RationalNumber(numerator / currGcd, denominator / currGcd);
    }

    public RationalNumber Exprational(int power)
    {
        int num;
        int den;
        if (numerator == 0) {
            if (power < 0) throw new ArgumentException();

            //Assuming the definition 0^0 = 1
            num = (power == 0 ? 1 : 0);
            den = 1;
        } else if (numerator == 1 && denominator == 1) {
            num = 1;
            den = 1;
        } else if (power == 0) {
            num = 1;
            den = 1;
        } else if (power == 1) {
            num = numerator;
            den = denominator;
        } else if (power > 1) {
            num = (int) Math.Pow(numerator, power);
            den = (int) Math.Pow(denominator, power);
        } else {
            num = (int) Math.Pow(denominator, power);
            den = (int) Math.Pow(numerator, power);
        }

        return new RationalNumber(num, den).Reduce();
    }

    public double Expreal(int baseNumber) => baseNumber.Expreal(this);

    private int gcd (int num, int den) {
        num = Math.Abs(num);
        den = Math.Abs(den);

        if (num == den) return num;

        if (num < den) {
            int tmp = num;
            num = den;
            den = tmp;  
        }

        return den == 0 ? num : gcd(den, num % den);
    }
}